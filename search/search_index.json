{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nWhen the program is run, it will check the google sheet for any new changes, and will run relevant tasks when the information has been changed. After the tasks have been run, the program will sleep  for a specified amount of time set in \u201cmain.py\u201d (the default is 5 seconds). This loop is located in main.py and can also be found below.\n\n\n  #import new sheet from google sheet api\n    quickstart.newSheet()\n    #open csv file to check for changes\n    inputfile = csv.reader(open('results.csv', 'r'))\n    #check for changes and if changes exist send email to user\n    csvsearch.verification_check()\n\n    print \nRun Complete: \n + str(datetime.datetime.now())\n    sleep(5)\n\n\n\n\nUpon finding changes in the google sheet the program will generate new json files for the project information, the schema, and the form for the supplied project. \n\n\nCurently the google api is limited to 50 writes per day on a free account.  This means that in theory only 50 projects can be created per day as after 50 writes the program will be unable to overwrite the 1 in the verified column and endless emails will be sent.\n\n\nThis project also contains a Dockerfile which allows for the project to run in an optimized docker container.", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "When the program is run, it will check the google sheet for any new changes, and will run relevant tasks when the information has been changed. After the tasks have been run, the program will sleep  for a specified amount of time set in \u201cmain.py\u201d (the default is 5 seconds). This loop is located in main.py and can also be found below.    #import new sheet from google sheet api\n    quickstart.newSheet()\n    #open csv file to check for changes\n    inputfile = csv.reader(open('results.csv', 'r'))\n    #check for changes and if changes exist send email to user\n    csvsearch.verification_check()\n\n    print  Run Complete:   + str(datetime.datetime.now())\n    sleep(5)  Upon finding changes in the google sheet the program will generate new json files for the project information, the schema, and the form for the supplied project.   Curently the google api is limited to 50 writes per day on a free account.  This means that in theory only 50 projects can be created per day as after 50 writes the program will be unable to overwrite the 1 in the verified column and endless emails will be sent.  This project also contains a Dockerfile which allows for the project to run in an optimized docker container.", 
            "title": "Overview"
        }, 
        {
            "location": "/credentials/", 
            "text": "Credentials\n\n\nIn order for the program to run correctly a file must be inserted called emailcreds.py containing login information for a gmail address and a mongodb user.\n\n\nThe format of the file is as follows:\n\n\n  login = \nGmail login\n\n  password= \nGmail password\n\n  mongoUser = \nMongo username\n\n  mongoPassword = \nMongo Password\n\n\n\n\n\nThe gmail login that you provide will be used to send out emails containing the information for the user to create a project and the mongo credientials will be used to store the data from the projcet so that it can be accessed by the front end react app when the projcet is going to be created.\n\n\nAnother essential file that is missing in this GitHub repository is a JSON file called \u201cuserSheet.json\u201d. This file contains the secret API keys required to connect to the google sheet connected to the google form. This file can be generated on Google\u2019s developer console.  This is an example of the template:\n\n\n  {\ntype\n: \nservice_account\n,\n  \nproject_id\n: \nPROJECT ID\n,\n  \nprivate_key_id\n: \nPRIVATE KEY ID\n,\n  \nprivate_key\n: \nPRIVATE KEY\n ,\n  \nclient_email\n: \nCLIENT EMAIL\n,\n  \nclient_id\n: \nCLIENT ID\n,\n  \nauth_uri\n: \nhttps://accounts.google.com/o/oauth2/auth\n,\n  \ntoken_uri\n: \nhttps://accounts.google.com/o/oauth2/token\n,\n  \nauth_provider_x509_cert_url\n: \nhttps://www.googleapis.com/oauth2/v1/certs\n,\n  \nclient_x509_cert_url\n: \nAPI URL\n}", 
            "title": "Credentials"
        }, 
        {
            "location": "/credentials/#credentials", 
            "text": "In order for the program to run correctly a file must be inserted called emailcreds.py containing login information for a gmail address and a mongodb user.  The format of the file is as follows:    login =  Gmail login \n  password=  Gmail password \n  mongoUser =  Mongo username \n  mongoPassword =  Mongo Password   The gmail login that you provide will be used to send out emails containing the information for the user to create a project and the mongo credientials will be used to store the data from the projcet so that it can be accessed by the front end react app when the projcet is going to be created.  Another essential file that is missing in this GitHub repository is a JSON file called \u201cuserSheet.json\u201d. This file contains the secret API keys required to connect to the google sheet connected to the google form. This file can be generated on Google\u2019s developer console.  This is an example of the template:    { type :  service_account ,\n   project_id :  PROJECT ID ,\n   private_key_id :  PRIVATE KEY ID ,\n   private_key :  PRIVATE KEY  ,\n   client_email :  CLIENT EMAIL ,\n   client_id :  CLIENT ID ,\n   auth_uri :  https://accounts.google.com/o/oauth2/auth ,\n   token_uri :  https://accounts.google.com/o/oauth2/token ,\n   auth_provider_x509_cert_url :  https://www.googleapis.com/oauth2/v1/certs ,\n   client_x509_cert_url :  API URL }", 
            "title": "Credentials"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nThe information to create a project will be entered into a google form at https://goo.gl/forms/xeNxgnVAnAmmIVJJ2. After the information is entered in the google form the information will show up in a google form called results located at https://docs.google.com/spreadsheets/d/14dduhfPnC8y9euY5pH7DKONmWR_wIV_UdOF0cSBPD9Q/edit?usp=sharing.  At this point each project can be reviewed and changed based on the preference of the ixo team. When the project characteristics are finialized the reviewer will place a '1' in the column titled verified. \n\n\nOnce a '1' is found in that column all the information for that project will be grabbed by this program and the schema and form will be generated. Then all of the information will be uploaded to a mongo database and the project creator will be sent an email with instructions on how to finish creating their project.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "The information to create a project will be entered into a google form at https://goo.gl/forms/xeNxgnVAnAmmIVJJ2. After the information is entered in the google form the information will show up in a google form called results located at https://docs.google.com/spreadsheets/d/14dduhfPnC8y9euY5pH7DKONmWR_wIV_UdOF0cSBPD9Q/edit?usp=sharing.  At this point each project can be reviewed and changed based on the preference of the ixo team. When the project characteristics are finialized the reviewer will place a '1' in the column titled verified.   Once a '1' is found in that column all the information for that project will be grabbed by this program and the schema and form will be generated. Then all of the information will be uploaded to a mongo database and the project creator will be sent an email with instructions on how to finish creating their project.", 
            "title": "Usage"
        }
    ]
}